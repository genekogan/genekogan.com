<!title>___</!title>
<!date>Fri, 7 Sep 2012 18:00:00 +0430</!date>
<!type>writing</!type>
<!description>___</!description>
<!include>jquery</!include>
<!include>lightbox</!include>
<!link>/writing/off-axis-perspective-projection.html</!link>

<p>
	I've been working recently with <a href="http://www.glimpses.bz">Balaji Palani</a> on off-axis perspective projection, a technique which transforms a 2d projection of a 3d scene according to the head position of a single observer. Put more simply, it is intended to give a hologram-like illusion of depth to a flat projected image by shifting the view of the object according to your viewing angle. We use a Kinect to track the head position of the viewer, and render the scene according to that. Below is a video of a prototype in action, where I am clumsily holding a video camera in front of my head.
</p>
<p>
	[video]
</p>
<p>
	http://en.wikipedia.org/wiki/Viewing_frustum

	It is made relatively easy by OpenGL's in-built camera shifting functions for a GL-rendered scene. So the implementation is pretty consistent among different programming environments, Processing in our case. 
</p>
<p>
	There are a lot of resources and code snippets online which helped us figure out how to implement it. The initial inspiration came from a <a href="http://www.youtube.com/watch?feature=player_embedded&v=Jd3-eiid-Uw">demo</a> by <a href="http://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction">HCI</a> researcher <a href="http://johnnylee.net/">Johnny Chung Lee</a> demonstrating it tracking the eyes with a Wiimote. He's actually using infrared emitters on a pair of glasses which is tracked by the Wiimote, so he gets pretty unbelievable accuracy. This <a href="http://csc.lsu.edu/~kooima/pdfs/gen-perspective.pdf">more technical paper</a> by Robert Kooima gets a bit deeper into the math of the transformation matrix used by OpenGL to warp the image for the desired effect. This <a href="http://www.arcsynthesis.org/gltut/Positioning/Tut04%20Perspective%20Projection.html">tutorial</a> also has example shader code (GLSL) to do it manually, though I haven't read through it.
</p>
